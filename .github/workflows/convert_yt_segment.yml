name: Convert Multiple YT Segments

on:
  workflow_dispatch:
    inputs:
      SEGMENT_DURATION:
        description: 'Segment duration in seconds'
        required: false
        default: '240'
      FPS:
        description: 'FPS (e.g., source, 24)'
        required: false
        default: 'source'
      RESOLUTION:
        description: 'Resolution (e.g., source, 1280:-2)'
        required: false
        default: 'source'
      CRF:
        description: 'Constant Rate Factor'
        required: false
        default: '29.5'
      DEBLOCK:
        description: 'Deblock settings (e.g., 0:0)'
        required: false
        default: '0:0'
      RD:
        description: 'RD value'
        required: false
        default: '6'
      PSY_RD:
        description: 'Psy-RD value'
        required: false
        default: '1.00'
      AQ_MODE:
        description: 'AQ Mode (e.g., 2)'
        required: false
        default: '2'
      AQ_STRENGTH:
        description: 'AQ Strength'
        required: false
        default: '1.00'

jobs:
  prepare:
    name: Download and segment videos
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get purge -y man-db
          sudo apt install -y p7zip-full
          curl -L "https://www.dropbox.com/scl/fi/bdioefcl1dce4zs7iqqr6/ffmpeg-release-amd64-static.tar.xz?rlkey=npbqixqrbarhmuymm4ps5em45&dl=1" -o "ffmpeg.tar.xz"
          curl -L "https://github.com/ffbinaries/ffbinaries-prebuilt/releases/download/v6.1/ffprobe-6.1-linux-64.zip" -o "./ffprobe-6.1-linux-64.zip"
          tar -xf ffmpeg.tar.xz
          7z x ./ffprobe-6.1-linux-64.zip
          sudo mv ffmpeg-*-amd64-static/ffmpeg /usr/local/bin/
          sudo mv ./ffprobe /usr/local/bin/ffprobe
          sudo chmod +x /usr/local/bin/ffmpeg
          sudo apt-get install jq python3 python3-pip
          pip install yt-dlp

      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.RCLONE_CONF }}

      - name: Download videos from yt_urls.txt
        run: |
          mkdir -p input
          cat yt_urls.txt | grep -v '^#' | awk NF > urls_cleaned.txt
          while IFS= read -r url; do
            yt-dlp --cookies youtube_cookies.txt --no-playlist "$url" -S vcodec:h264,res,acodec:m4a -P "input"
            yt-dlp --cookies youtube_cookies.txt --no-playlist --skip-download "$url" --write-sub --write-auto-sub --sub-lang en --convert-subs srt -P "sub"
            yt-dlp --cookies youtube_cookies.txt --no-playlist --skip-download "$url" --write-thumbnail --write-description --convert-thumbnails jpg -P "desc"
          done < urls_cleaned.txt
          find desc -type f -name "*.description" -exec bash -c 'mv "$0" "${0%.description}.txt"' {} \;
          rclone copy ./sub BDoDrive:Here/out/sub
          rclone copy ./desc BDoDrive:Here/out/desc

      - name: Generate segment matrix
        id: set-matrix
        env:
          SEGMENT_DURATION: ${{ github.event.inputs.SEGMENT_DURATION }}
        run: |
          echo "[" > matrix.json
          for path in input/*; do
            file=$(basename "$path")
            duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$file")
            duration=${duration%.*}
            total_segments=$(( (duration + SEGMENT_DURATION - 1) / SEGMENT_DURATION ))
            for (( i=0; i<total_segments; i++ )); do
              ss=$(( i * SEGMENT_DURATION ))
              t=$SEGMENT_DURATION
              [ $((ss + t)) -gt $duration ] && t=$((duration - ss))
              echo "{\"file\": \"$file\", \"ss\": $ss, \"t\": $t}," >> matrix.json
            done
          done
          sed -i '$ s/,$//' matrix.json
          echo "]" >> matrix.json

          matrix_json=$(cat matrix.json | jq -c '.')
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$matrix_json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  convert:
    name: Convert Segments
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.RCLONE_CONF }}

      - name: Run segment conversion
        run: |
          mkdir -p output scripts
          rclone copy DBOX:scripts ./scripts
          chmod +x ./scripts/convert_yt_segment.sh
          ./scripts/convert_yt_segment.sh "${{ matrix.file }}" "${{ matrix.ss }}" "${{ matrix.t }}"
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
          FPS: ${{ github.event.inputs.FPS }}
          RESOLUTION: ${{ github.event.inputs.RESOLUTION }}
          CRF: ${{ github.event.inputs.CRF }}
          DEBLOCK: ${{ github.event.inputs.DEBLOCK }}
          RD: ${{ github.event.inputs.RD }}
          PSY_RD: ${{ github.event.inputs.PSY_RD }}
          AQ_MODE: ${{ github.event.inputs.AQ_MODE }}
          AQ_STRENGTH: ${{ github.event.inputs.AQ_STRENGTH }}

  convert-audios:
    name: Convert Audios
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.RCLONE_CONF }}

      - name: Run audio conversion
        run: |
          mkdir -p scripts
          rclone copy DBOX:scripts ./scripts
          chmod +x ./scripts/convert_audio_yt_split.sh
          ./scripts/convert_audio_yt_split.sh "$file"
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
